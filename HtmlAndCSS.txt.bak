
display:

	block: element starts on a new line and takes up available screen width.
	flex: gives access to the Flex layout system.
	grid: allows to build layouts with the grid system.
	inherit: the element inherits the display property of its parent.
	initial: sets the display property of the element to its default value.
	inline: element put inline (however, you can't set the width or height.
	inline-block: same as inline but you can set a width and/or height of element.
	none: element is taken off the screen.
	
margin:

	margin: top right bottom left;
	
box-shadow:

	box-shadow: offset-x offset-y blur-radius color
	
	
	
Selectors
- Types of Selectors
	- Elements: 	h1 {}
	- Classes:  	.blog-post {}
	- Universal: 	* {}  - rarely used
	- IDs:			#main-title {}
	- Attributes:	[disabled] {}
	
Styles in Chrome tools:
	- top style takes priority.

Priority and Specificity of selectors:
	- Inline Styles
	- #ID selectors
	- .class, :psuedo-class and [attribute]
	- <Tag< and ::pseudo-element selectors
	
Combinators:
	- Adjacent Sibling: 	div + p {} : all p that directly follow a div tag
	- General Sibling:		div ~ p {} : all p that have an div sibling
	- Child:				div > p {} : all p that are direct child of div
	- Descendant: 			div p {}   : all p that are descendent of div 
	- Selectors						a.aclass   : all a that have the class aclass assigned

Selectors, Properties and Values:
	Selectors	Properties			Values
	div			background-color	red
	.blog-post	width				30%
	#main-title	color				#fff
	[disabled]	margin				10px
	*			display				block

Value Types:
	- Pre-defined Options: 		display: block; overflow: auto;
	- Colors:					background: red; color: #00F;
	- Length, sizes, numbers:	height: 100px; width: 20%;
	- Functions					background: url(); transform: scale();
	
Look for CSS Property and Value information:
	- https://developer.mozilla.org/en-US/docs/Web/CSS/Reference
	
Every element in CSS is determined as a box.
Two elements margin between them, largest margin wins.

Shorthand Properties:
	- Combine values of multiple propertins in a single property:
		border-width: 2px;
		border-style: solid;
		border-color: blue		==>  border: 2px solid blue;
		
		margin-top: 5px;
		margin-right: 10px;
		margin-bottom:  5px;
		margin-left: 10px; 		==> margin: top right bottom left;
		
Width and Height
	- Width and Height percentage are respective of the parent available width 
	  and height.
	- If you ever want to style the height of an element relative to the height
	  of your page, you need to need to create a chain passing the page height
	  down.
		html { height: 100%; }
		body { height: 100%; }
		main { height: 100%; }
	- When you set width and height, you are setting width and heigh of the
	  content (content-box).  Not including padding and border.
	  - Default is: 
		box-sizing: content-box;
	  - Can use:
		box-sizing: border-box;  // includes padding and border
	- The border-box is often used as a default style for all elements.
	  Generally defined in the universal selector as part of reset.  This
	  overrides inheritance and browser defaults.
		* {
			box-sizing: border-box;
		}
		
Block-level vs Inline Elements
	- Block-level:
		<div>, <section>, <article>, <nav>, <h1>, <p>, <li>
	- Inline:
		<a>, <span>, <img>

Pseudo Class vs Pseudo Element
	- Pseudo class defines the style of a special state of an element.
		- :class name
	- Pseudo element defines the style of a specific part of an element.
		- ::element name

Properties Worth Remembering
	color:
	background-color:
	display:
	padding:
	border:
	margin:
	width:
	height:
	
Selecting the Oposite with :not()
	- The :not() pseudo-class represents elements that do not match a
	  list of selectors.
	  - :not(p) { color: blue } - selects any element that is NOT a p.

Float means you override the default position and push the item to the 
left or right.  However, when you use float, it could mess other elements
position.  To deal with this, add a <div> element after the elment you 
want to float. Then, in CSS, add the class definition:
	.clearfix {
		clear: both;
	}
	
Positioning
	- Default value - position: static
	- Positioning options:
		static
		absolute
		relative
		fixed
		sticky
	- Moving element positions:
		top: 
		bottom
		left
		right
		
	- Position: fixed;
		- Takes the element out of the document flow and it then behaves
		  like an inline element.  
		
		- Anchor point: Viewport
		  context. It always relates to the Viewport.
		- Can be applied with same effect for block-level or inline elements.
	
	- Position: absolute;
		- The element is taken out of the document flow.
		- If none of the parent ancestor elements have a position property
		  applied, the positioning is relative to the html element.
		- If a parent ancestor element has a postioning property applied,
		  the closest ancestor with position applied is the context.
		  
	- Position: relative;
		- The element is not taken out of the document flow.
		- Anchor point: the element itself.
		
	- Position: sticky;
		- We can specify a distance between our element and our viewport.
		  As soon as we reach this distance, the element is fixed.
		- The element stops being fixed as soon as it reaches the end of
		  the content of its parent element.

Adding a z-index to any element without a position property will have no
effect.

Overflow: hidden; - if this is defined in the body, it will have no effect.
It is essentially "moved" to the html element.  However, you can define 
overflow: hidden in both the html element and the body, and you will get
the desired effect.

Image
	- Use background-size: cover; to insure there is not any white space
	  in your container.  Best to use.
	- background-size: contain; insures the full image is within the
	  container.
	
	- background-position: from-left-edge from-top-edge;
	  background-position: 20px 50px;
	  
	- The background property:
		- It is shorthand. Can be split up into:
			background-image: Set one or more background images
			background-color: Set a solid background color.
			background-position: Set a background-image position, relative to background position layer
			background-size: Sets the size of background-image
			background-repeat: Defines how background images are repeated.
			background-origin: Set background-image postioning area.
			background-clip: Define whether background extends underneath border.
			background-attachment: Sets the scrolling behavior of the background-image.
	
	- Shorthand for background:
		 background: url("") left x% bottom y%/cover no-repeat border-box border-box
		 background: url("") bg-position/bg-size bg-repeat bg-origin bg-clip bg-attachment
		 
Units
	- Unit options:
		pixels - px
		percentage - %
		root em - rem
		em - em
		viewport height - vh
		viewport width - vw
		auto
		
	- Where units matter:
		font-size
		padding
		border
		margin
		width
		height
		top
		bottom
		left
		right
		
	- How is the size calculated:
		Absolute Lengths:
			Mostly ignore user settings
				px
		
		Viewport Lengths:
			Adjust to current Viewport
				vh
				vw
				
		Font-Relative Lengths
			Adjust to default font size
				rem
				em
		
		Percentage:
				%
	- 3 Rules to Remember
		- % and position:fixed ==>
			- The containing block is the viewport.
		- % and position:absolute ==>
			- The containing block is the closest ancestor that is not 
			  position: static (ancestor's content + padding).
		- % and position:static or position:relative ==>
			- The containing block is the closest ancestor that is block level.
			  (ancestor's content only).

	- Defining the font size in root elements:
		html {
			font-size: 75%;  /* 75% of browser settings */
		}
		
	- Which Unit Should You Choose:
		Property					Recommended Unit
		--------------------------------------------
		font-size (root element)	%
		font-size					rem
		padding, margin				rem
		border						px
		width, height				%, vw, vh
		top, bottom, left, right	%
	
	- Auto to Center elements
		- margin: auto; only works with block level elements with an 
		  explicitly assigned width
		  
		  
Font Shorthand
	- Format:
		font: font-style font-variant font-weight Req:font-size/line-height Req:font-family
		font: italic small-caps 700 1.2rem/2 "AnonymousPro", sans-serif;
		
Font Display
	- Loading perfomance of fonts.
		- Acceptable values:
			swap
			block
			fallback
			optional
			auto (default): browser will choose an option of its choice
			
Flexbox
	- Allows us to change the way our elements are displayed.
	- To add flexbox capability, we need to change our display property.
		- display: flex;
	- We create a Flex Container containing Flex Items
	- Once we have turned our elements into a "flex construct", we can apply
	  different properties to both the flex container and flex items:
		
			Parent (Flex container)		Children (Flex items)
			--------------------------------------------------
			flex-flow:					order:
			justify-content:			flex:
			align-content:				align-self:
			align-items:
			
	- Flex Container:
		display: flex;
			- Flex items are displayed in one row.
			- Height is defined by the largest height of flex items, or by content.
			- On decreasing the window size, the content width decreases to
			  the size that is needed for the content.
			  
		display: inline-flex;
			- Flex items are displayed in one row.
			- Height is defined by the largest height of flex items, or by content.
			- On decreasing the window size, the content width remains the same.

		flex-direction: 
			- row;			(default) row direction
			- column;		column direction
			- row-reverse;
			- col-reverse;
			
		flex-wrap: 
			- no-wrap;		(default) 
			- wrap;
			- wrap-reverse;
			
		flex-flow: flex-direction flex-wrap
		flex-flow: row wrap;
		
		align-items: defines the positioning of the elements along the cross axis
			- stretch; 		(default)
			- center;		Centers items along cross-axis
			- flex-start;
			- flex-end;
			- baseline;
			
		justify-content: defines the positioning of the elements along the main axis
			- center;
			
		align-content: defines behavior along the cross axis
			- center;
			- space-between;
			- flex-start;
			
	- Flex Items
		order: 			allows you to change order of an item.
		align-self: 	allows you to align an flex item.
		flex-grow:	
		flex-shrink:	
		flex-basis:
		flex: 			shorthand
	
Grid
	Grid Container:
		- display: grid;
		- grid-template-columns: 200px 2fr 20% 1fr;
		  grid-template-columns: repeat(4, 25%);
		- grid-template-rows: 5rem 2.5rem;
	
	Grid Elements:
		- grid-column-start: 3;
		- grid-column-end: 5; or grid-column-end: span 2;
		- grid-row-start: 1;
		- grid-row-end: 3;